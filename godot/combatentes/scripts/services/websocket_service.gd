# websocket_service.gd
extends Node

# Sinais emitidos para comunica√ß√£o com outras partes do jogo
signal connected
signal disconnected
signal message_received(message_data)

var websocket: WebSocketPeer
var url = "wss://combatentes.zionix.com.br"
var fallback_url = "ws://combatentes.zionix.com.br"
var connection_attempts = 0

func _ready():
	websocket = WebSocketPeer.new()

func connect_to_server():
	connection_attempts += 1
	var current_url = url if connection_attempts == 1 else fallback_url
	
	print("üîó WEBSOCKET - Tentativa ", connection_attempts, " - Conectando ao: ", current_url)
	print("üîó WEBSOCKET - Estado inicial: ", _state_to_string(websocket.get_ready_state()))
	
	var err = websocket.connect_to_url(current_url)
	print("üîó WEBSOCKET - Resultado da conex√£o: ", err)
	
	if err != OK:
		print("‚ùå WEBSOCKET - ERRO: Falha ao conectar ao WebSocket. C√≥digo de erro: ", err)
		print("‚ùå WEBSOCKET - URL testada: ", current_url)
		print("‚ùå WEBSOCKET - Poss√≠veis causas:")
		print("  - Servidor indispon√≠vel")
		print("  - Problemas de rede/firewall")
		print("  - URL incorreta")
		print("  - Problemas de SSL/certificado")
	else:
		print("‚úÖ WEBSOCKET - Comando de conex√£o enviado com sucesso para: ", current_url)

func send_message(message: Dictionary):
	print("üì§ WEBSOCKET - Tentando enviar mensagem: ", message)
	print("üì§ WEBSOCKET - Estado da conex√£o: ", _state_to_string(websocket.get_ready_state()))
	
	if websocket.get_ready_state() == WebSocketPeer.STATE_OPEN:
		var json_message = JSON.stringify(message)
		websocket.send_text(json_message)
		print("‚úÖ WEBSOCKET - Mensagem enviada com sucesso: ", json_message)
	else:
		print("‚ùå WEBSOCKET - ERRO: WebSocket n√£o conectado. Estado: ", _state_to_string(websocket.get_ready_state()))
		print("‚ùå WEBSOCKET - N√£o foi poss√≠vel enviar mensagem: ", message)

var last_state = WebSocketPeer.STATE_CLOSED
var connection_established = false

func _process(delta):
	websocket.poll()
	
	var state = websocket.get_ready_state()
	
	# Detecta mudan√ßa de estado para emitir sinais apropriados
	if state != last_state:
		print("WebSocket mudou de estado: ", _state_to_string(last_state), " -> ", _state_to_string(state))
		last_state = state
		
		if state == WebSocketPeer.STATE_OPEN and not connection_established:
			connection_established = true
			print("‚úÖ Conex√£o WebSocket estabelecida")
			emit_signal("connected")
		elif state == WebSocketPeer.STATE_CLOSED and connection_established:
			connection_established = false
			var code = websocket.get_close_code()
			var reason = websocket.get_close_reason()
			print("‚ùå WebSocket fechado com c√≥digo: ", code, " raz√£o: ", reason)
			print("‚ùå Detalhes do fechamento:")
			_print_close_code_details(code)
			emit_signal("disconnected")
		elif state == WebSocketPeer.STATE_CLOSED and not connection_established:
			# Conex√£o falhou antes de ser estabelecida
			var code = websocket.get_close_code()
			var reason = websocket.get_close_reason()
			print("‚ùå Falha na conex√£o WebSocket - c√≥digo: ", code, " raz√£o: ", reason)
			_print_close_code_details(code)
	
	if state == WebSocketPeer.STATE_OPEN:
		while websocket.get_available_packet_count() > 0:
			var packet = websocket.get_packet()
			var data = packet.get_string_from_utf8()
			print("üì® WEBSOCKET - Mensagem bruta recebida: ", data)
			
			var json = JSON.new()
			var parse_result = json.parse(data)
			if parse_result == OK:
				var json_data = json.data
				print("üì® WEBSOCKET - JSON parseado: ", json_data)
				print("üì® WEBSOCKET - Tipo da mensagem: ", json_data.get("type", "SEM_TIPO"))
				emit_signal("message_received", json_data)
			else:
				print("‚ùå WEBSOCKET - ERRO: Falha ao fazer parse do JSON: ", data)

func _state_to_string(state: int) -> String:
	match state:
		WebSocketPeer.STATE_CONNECTING:
			return "CONNECTING"
		WebSocketPeer.STATE_OPEN:
			return "OPEN"
		WebSocketPeer.STATE_CLOSING:
			return "CLOSING"
		WebSocketPeer.STATE_CLOSED:
			return "CLOSED"
		_:
			return "UNKNOWN"

func get_connection_state() -> int:
	return websocket.get_ready_state()

func is_websocket_connected() -> bool:
	return websocket.get_ready_state() == WebSocketPeer.STATE_OPEN

func disconnect_from_server():
	if websocket.get_ready_state() == WebSocketPeer.STATE_OPEN:
		websocket.close()

func _print_close_code_details(code: int):
	match code:
		1000:
			print("  - C√≥digo 1000: Fechamento normal")
		1001:
			print("  - C√≥digo 1001: Endpoint indo embora (p√°gina fechando)")
		1002:
			print("  - C√≥digo 1002: Erro de protocolo")
		1003:
			print("  - C√≥digo 1003: Tipo de dados n√£o suportado")
		1006:
			print("  - C√≥digo 1006: Conex√£o fechada anormalmente (sem handshake)")
		1007:
			print("  - C√≥digo 1007: Dados inv√°lidos recebidos")
		1008:
			print("  - C√≥digo 1008: Viola√ß√£o de pol√≠tica")
		1009:
			print("  - C√≥digo 1009: Mensagem muito grande")
		1010:
			print("  - C√≥digo 1010: Extens√£o obrigat√≥ria ausente")
		1011:
			print("  - C√≥digo 1011: Erro interno do servidor")
		1015:
			print("  - C√≥digo 1015: Falha na verifica√ß√£o TLS")
		_:
			print("  - C√≥digo ", code, ": C√≥digo de fechamento desconhecido")

func _exit_tree():
	disconnect_from_server()
