// Mocks generated by Mockito 5.4.6 from annotations
// in combatentes/test/placement_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:combatentes/game_socket_service.dart' as _i2;
import 'package:combatentes/modelos_jogo.dart' as _i4;
import 'package:combatentes/providers.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [GameSocketService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameSocketService extends _i1.Mock implements _i2.GameSocketService {
  MockGameSocketService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.EstadoJogo> get streamDeEstados =>
      (super.noSuchMethod(
            Invocation.getter(#streamDeEstados),
            returnValue: _i3.Stream<_i4.EstadoJogo>.empty(),
          )
          as _i3.Stream<_i4.EstadoJogo>);

  @override
  _i3.Stream<String> get streamDeErros =>
      (super.noSuchMethod(
            Invocation.getter(#streamDeErros),
            returnValue: _i3.Stream<String>.empty(),
          )
          as _i3.Stream<String>);

  @override
  _i3.Stream<_i5.StatusConexao> get streamDeStatus =>
      (super.noSuchMethod(
            Invocation.getter(#streamDeStatus),
            returnValue: _i3.Stream<_i5.StatusConexao>.empty(),
          )
          as _i3.Stream<_i5.StatusConexao>);

  @override
  void connect(String? url, {String? nomeUsuario}) => super.noSuchMethod(
    Invocation.method(#connect, [url], {#nomeUsuario: nomeUsuario}),
    returnValueForMissingStub: null,
  );

  @override
  void enviarMovimento(String? idPeca, _i4.PosicaoTabuleiro? novaPosicao) =>
      super.noSuchMethod(
        Invocation.method(#enviarMovimento, [idPeca, novaPosicao]),
        returnValueForMissingStub: null,
      );

  @override
  void enviarNome(String? nome) => super.noSuchMethod(
    Invocation.method(#enviarNome, [nome]),
    returnValueForMissingStub: null,
  );

  @override
  void reconnect(String? url, {String? nomeUsuario}) => super.noSuchMethod(
    Invocation.method(#reconnect, [url], {#nomeUsuario: nomeUsuario}),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<bool> reconnectDuringPlacement(
    String? url, {
    String? nomeUsuario,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #reconnectDuringPlacement,
              [url],
              {#nomeUsuario: nomeUsuario},
            ),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  void enviarMensagemPlacement(Map<String, dynamic>? message) =>
      super.noSuchMethod(
        Invocation.method(#enviarMensagemPlacement, [message]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
