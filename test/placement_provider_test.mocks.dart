// Mocks generated by Mockito 5.4.6 from annotations
// in combatentes/test/placement_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:combatentes/modelos_jogo.dart' as _i4;
import 'package:combatentes/placement_controller.dart' as _i3;
import 'package:combatentes/placement_error_handler.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakePlacementResult_0<T> extends _i1.SmartFake
    implements _i2.PlacementResult<T> {
  _FakePlacementResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PlacementController].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlacementController extends _i1.Mock
    implements _i3.PlacementController {
  MockPlacementController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isGameStarting =>
      (super.noSuchMethod(
            Invocation.getter(#isGameStarting),
            returnValue: false,
          )
          as bool);

  @override
  int get countdownSeconds =>
      (super.noSuchMethod(Invocation.getter(#countdownSeconds), returnValue: 0)
          as int);

  @override
  bool get isRetrying =>
      (super.noSuchMethod(Invocation.getter(#isRetrying), returnValue: false)
          as bool);

  @override
  bool get isReconnecting =>
      (super.noSuchMethod(
            Invocation.getter(#isReconnecting),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void updateState(_i4.PlacementGameState? newState) => super.noSuchMethod(
    Invocation.method(#updateState, [newState]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i2.PlacementResult<void>> confirmPlacement() =>
      (super.noSuchMethod(
            Invocation.method(#confirmPlacement, []),
            returnValue: _i5.Future<_i2.PlacementResult<void>>.value(
              _FakePlacementResult_0<void>(
                this,
                Invocation.method(#confirmPlacement, []),
              ),
            ),
          )
          as _i5.Future<_i2.PlacementResult<void>>);

  @override
  _i2.PlacementResult<void> validatePiecePlacement({
    required _i4.PosicaoTabuleiro? position,
    required _i4.Patente? pieceType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#validatePiecePlacement, [], {
              #position: position,
              #pieceType: pieceType,
            }),
            returnValue: _FakePlacementResult_0<void>(
              this,
              Invocation.method(#validatePiecePlacement, [], {
                #position: position,
                #pieceType: pieceType,
              }),
            ),
          )
          as _i2.PlacementResult<void>);

  @override
  _i2.PlacementResult<void> placePiece({
    required _i4.PosicaoTabuleiro? position,
    required _i4.Patente? pieceType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#placePiece, [], {
              #position: position,
              #pieceType: pieceType,
            }),
            returnValue: _FakePlacementResult_0<void>(
              this,
              Invocation.method(#placePiece, [], {
                #position: position,
                #pieceType: pieceType,
              }),
            ),
          )
          as _i2.PlacementResult<void>);

  @override
  _i5.Future<_i2.PlacementResult<T>> retryOperation<T>(
    _i5.Future<_i2.PlacementResult<T>> Function()? operation,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#retryOperation, [operation]),
            returnValue: _i5.Future<_i2.PlacementResult<T>>.value(
              _FakePlacementResult_0<T>(
                this,
                Invocation.method(#retryOperation, [operation]),
              ),
            ),
          )
          as _i5.Future<_i2.PlacementResult<T>>);

  @override
  void reset() => super.noSuchMethod(
    Invocation.method(#reset, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i4.PlacementGameState?> restoreSavedState() =>
      (super.noSuchMethod(
            Invocation.method(#restoreSavedState, []),
            returnValue: _i5.Future<_i4.PlacementGameState?>.value(),
          )
          as _i5.Future<_i4.PlacementGameState?>);

  @override
  _i5.Future<void> clearPersistedState() =>
      (super.noSuchMethod(
            Invocation.method(#clearPersistedState, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> hasValidSavedState() =>
      (super.noSuchMethod(
            Invocation.method(#hasValidSavedState, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> attemptManualReconnection() =>
      (super.noSuchMethod(
            Invocation.method(#attemptManualReconnection, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
