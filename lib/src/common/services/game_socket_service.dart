import 'dart:async';
import 'dart:convert';
import 'dart:math' as math;

import 'package:flutter/foundation.dart';
import 'package:web_socket_channel/web_socket_channel.dart';

import 'package:combatentes/src/common/models/modelos_jogo.dart';
import 'package:combatentes/src/common/models/game_state_models.dart';

/// Encapsula a comunica√ß√£o com o servidor WebSocket do jogo.
class GameSocketService {
  WebSocketChannel? _channel;
  final _estadoController = StreamController<EstadoJogo>.broadcast();
  final _erroController = StreamController<String>.broadcast();
  final _statusController = StreamController<StatusConexao>.broadcast();
  final _placementController =
      StreamController<Map<String, dynamic>>.broadcast();
  Timer? _connectionTimeout;
  Timer? _nameVerificationTimer;
  Timer? _heartbeatTimer;
  Timer? _keepAliveTimer;
  bool _isConnecting = false;
  bool _isConnected = false;
  bool _nameConfirmed = false;
  String? _pendingUserName;
  DateTime? _lastMessageReceived;
  bool _isInPlacementPhase = true; // Controla se est√° na fase de posicionamento
  int _reconnectionAttempts = 0; // Contador de tentativas de reconex√£o
  DateTime? _lastConnectionAttempt; // Timestamp da √∫ltima tentativa

  /// Stream que emite o [EstadoJogo] mais recente recebido do servidor.
  Stream<EstadoJogo> get streamDeEstados => _estadoController.stream;

  /// Stream que emite mensagens de erro recebidas do servidor.
  Stream<String> get streamDeErros => _erroController.stream;

  /// Stream que emite o status da conex√£o.
  Stream<StatusConexao> get streamDeStatus => _statusController.stream;

  /// Stream que emite mensagens de placement recebidas do servidor.
  Stream<Map<String, dynamic>> get streamDePlacement =>
      _placementController.stream;

  /// Conecta-se ao servidor WebSocket e come√ßa a ouvir por mensagens.
  void connect(String url, {String? nomeUsuario}) {
    if (_isConnecting) {
      debugPrint('‚ö†Ô∏è J√° est√° conectando, ignorando nova tentativa');
      return;
    }

    // Controle de rate limiting para evitar spam de conex√µes
    final now = DateTime.now();
    if (_lastConnectionAttempt != null) {
      final timeSinceLastAttempt = now.difference(_lastConnectionAttempt!);
      if (timeSinceLastAttempt.inSeconds < 5) {
        debugPrint('‚ö†Ô∏è Tentativa de conex√£o muito r√°pida, aguardando...');
        Future.delayed(
          Duration(seconds: 5 - timeSinceLastAttempt.inSeconds),
          () {
            connect(url, nomeUsuario: nomeUsuario);
          },
        );
        return;
      }
    }

    _lastConnectionAttempt = now;
    _isConnecting = true;
    _isConnected = false;
    _nameConfirmed = false;
    _pendingUserName = nomeUsuario;

    debugPrint('üîÑ Iniciando conex√£o (tentativa ${_reconnectionAttempts + 1})');

    // Emite status de conectando
    _statusController.add(StatusConexao.conectando);

    // Conecta de forma ass√≠ncrona para n√£o travar a UI
    _connectAsync(url, nomeUsuario);
  }

  /// Conecta de forma ass√≠ncrona com timeout e tratamento robusto de erros
  Future<void> _connectAsync(String url, String? nomeUsuario) async {
    // Cancela timeout anterior se existir
    _connectionTimeout?.cancel();

    // Define timeout de 10 segundos
    _connectionTimeout = Timer(const Duration(seconds: 10), () {
      if (_isConnecting) {
        _handleConnectionError(
          'Timeout: Servidor n√£o responde. Verifique se o servidor est√° ativo.',
        );
      }
    });

    // Usa runZonedGuarded para capturar TODAS as exce√ß√µes, incluindo as ass√≠ncronas
    runZonedGuarded(
      () {
        _channel = WebSocketChannel.connect(Uri.parse(url));

        // Configura listeners
        _channel!.stream.listen(
          (message) {
            // Conex√£o bem-sucedida, cancela timeout
            _connectionTimeout?.cancel();
            _isConnecting = false;

            // Marca como conectado na primeira mensagem recebida
            if (!_isConnected) {
              _isConnected = true;
              _reconnectionAttempts = 0; // Reset contador de tentativas
              debugPrint('‚úÖ Conex√£o estabelecida com sucesso');
              _statusController.add(StatusConexao.conectado);

              // Envia o nome imediatamente quando confirma conex√£o
              if (nomeUsuario != null) {
                debugPrint(
                  'üîÑ Conex√£o confirmada, reenviando nome: $nomeUsuario',
                );
                _sendMessage({
                  'type': 'definirNome',
                  'payload': {'nome': nomeUsuario},
                });
              }

              // Inicia monitoramento de heartbeat
              _startHeartbeatMonitoring();

              // Inicia keep-alive durante posicionamento
              if (_isInPlacementPhase) {
                _startKeepAlive();
              }
            }

            // Atualiza timestamp da √∫ltima mensagem recebida
            _lastMessageReceived = DateTime.now();

            try {
              final data = jsonDecode(message);
              final type = data['type'];

              // Qualquer mensagem do servidor indica que a conex√£o est√° funcionando
              // Se recebemos mensagens estruturadas, o nome provavelmente foi aceito
              if (!_nameConfirmed &&
                  (type == 'atualizacaoEstado' ||
                      type.startsWith('PLACEMENT_') ||
                      type == 'mensagemServidor')) {
                debugPrint(
                  '‚úÖ Nome implicitamente confirmado - servidor est√° respondendo',
                );
                _nameConfirmed = true;
                _nameVerificationTimer?.cancel();
              }

              debugPrint('üì® Mensagem recebida do servidor: $type');
              debugPrint('üì® Dados completos: $data');

              if (type == 'atualizacaoEstado') {
                final estado = EstadoJogo.fromJson(data['payload']);
                _estadoController.add(estado);

                // S√≥ muda para fase de jogo se realmente h√° pe√ßas no tabuleiro
                // Durante posicionamento, o estado pode vir vazio
                if (_isInPlacementPhase && estado.pecas.isNotEmpty) {
                  debugPrint(
                    'üéØ Detectada mudan√ßa para fase de jogo via atualizacaoEstado (${estado.pecas.length} pe√ßas)',
                  );
                  setPlacementPhase(false);
                } else if (_isInPlacementPhase && estado.pecas.isEmpty) {
                  debugPrint(
                    'üéØ Estado vazio recebido, mantendo fase de posicionamento',
                  );
                }
                _statusController.add(StatusConexao.jogando);
              } else if (type == 'erroMovimento') {
                final erro =
                    data['payload']?['mensagem'] ??
                    'Erro desconhecido do servidor.';
                _erroController.add(erro);
              } else if (type == 'PLACEMENT_OPPONENT_DISCONNECTED') {
                _statusController.add(StatusConexao.oponenteDesconectado);
                final mensagem =
                    data['data']?['message'] ?? 'Oponente desconectou';
                _erroController.add(mensagem);
              } else if (type == 'PLACEMENT_OPPONENT_RECONNECTED') {
                _statusController.add(StatusConexao.conectado);
                final mensagem =
                    data['data']?['message'] ?? 'Oponente reconectou';
                _erroController.add(mensagem);
              } else if (type == 'PLACEMENT_OPPONENT_ABANDONED') {
                _statusController.add(StatusConexao.oponenteDesconectado);
                final mensagem =
                    data['data']?['message'] ?? 'Oponente abandonou o jogo';
                _erroController.add(mensagem);
              } else if (type == 'PLACEMENT_UPDATE' ||
                  type == 'PLACEMENT_OPPONENT_READY' ||
                  type == 'PLACEMENT_GAME_START') {
                // Processa mensagens de placement
                debugPrint('üì® Mensagem de placement recebida: $type');

                // Garante que est√° na fase de posicionamento
                if (!_isInPlacementPhase && type != 'PLACEMENT_GAME_START') {
                  debugPrint('üéØ Detectada volta para fase de posicionamento');
                  setPlacementPhase(true);
                }

                // PLACEMENT_GAME_START indica fim do posicionamento
                if (type == 'PLACEMENT_GAME_START') {
                  debugPrint(
                    'üéØ Detectado fim do posicionamento via PLACEMENT_GAME_START',
                  );
                  setPlacementPhase(false);
                }

                _placementController.add(data);
              } else if (type == 'nomeDefinido' || type == 'nomeAtualizado') {
                debugPrint('‚úÖ Confirma√ß√£o de nome recebida do servidor');
                _nameConfirmed = true;
                _nameVerificationTimer?.cancel();
                final nomeConfirmado =
                    data['payload']?['nome'] ?? data['data']?['nome'];
                if (nomeConfirmado != null) {
                  debugPrint(
                    '‚úÖ Nome confirmado pelo servidor: $nomeConfirmado',
                  );
                }
              } else if (type == 'OPPONENT_DISCONNECTED' ||
                  type == 'GAME_OPPONENT_DISCONNECTED' ||
                  type == 'oponenteDesconectou') {
                debugPrint('üö® Oponente desconectou durante o jogo');
                _statusController.add(StatusConexao.oponenteDesconectado);
                final mensagem =
                    data['data']?['message'] ??
                    data['payload']?['mensagem'] ??
                    'Seu oponente saiu da partida';
                _erroController.add(mensagem);
              } else if (type == 'GAME_ABANDONED' || type == 'jogoAbandonado') {
                debugPrint('üö® Jogo foi abandonado pelo oponente');
                _statusController.add(StatusConexao.oponenteDesconectado);
                final mensagem =
                    data['data']?['message'] ??
                    data['payload']?['mensagem'] ??
                    'O jogo foi abandonado pelo oponente';
                _erroController.add(mensagem);
              } else if (type == 'mensagemServidor') {
                final mensagem = data['payload'].toString();
                debugPrint('üì¢ Mensagem do servidor: $mensagem');

                // Verifica se o oponente desconectou
                if (mensagem.contains('oponente desconectou') ||
                    mensagem.contains('O oponente desconectou') ||
                    mensagem.contains('opponent disconnected') ||
                    mensagem.contains('abandonou') ||
                    mensagem.contains('saiu da partida')) {
                  debugPrint(
                    'üö® Desconex√£o detectada via mensagem do servidor',
                  );
                  _statusController.add(StatusConexao.oponenteDesconectado);
                  _erroController.add('O oponente saiu da partida.');
                }
                // Mant√©m status conectado quando recebe mensagens do servidor
                else if (_isConnected && mensagem.contains('Aguardando')) {
                  _statusController.add(StatusConexao.conectado);
                }
              }
            } catch (e) {
              _erroController.add('Erro ao ler dados do servidor.');
            }
          },
          onError: (error) {
            _handleConnectionError(_getErrorMessage(error));
          },
          onDone: () {
            _connectionTimeout?.cancel();
            _isConnecting = false;
            _isConnected = false;
            _statusController.add(StatusConexao.desconectado);
          },
        );

        // Envia o nome do usu√°rio assim que conecta
        if (nomeUsuario != null) {
          debugPrint('üè∑Ô∏è Enviando nome do usu√°rio: $nomeUsuario');

          // Envia apenas uma vez inicialmente
          _sendMessage({
            'type': 'definirNome',
            'payload': {'nome': nomeUsuario},
          });
          debugPrint('‚úÖ Mensagem definirNome enviada');

          // Inicia timer para verificar confirma√ß√£o (mais conservador)
          _startNameVerificationTimer(nomeUsuario);
        } else {
          debugPrint('‚ö†Ô∏è Nome do usu√°rio √© null, n√£o enviando');
        }
      },
      (error, stackTrace) {
        // Captura TODAS as exce√ß√µes n√£o tratadas
        _handleConnectionError(_getErrorMessage(error));
      },
    );
  }

  /// Trata erros de conex√£o de forma centralizada
  void _handleConnectionError(String mensagem) {
    _connectionTimeout?.cancel();
    _nameVerificationTimer?.cancel();
    _heartbeatTimer?.cancel();
    _keepAliveTimer?.cancel();
    _isConnecting = false;
    _isConnected = false;
    _nameConfirmed = false;

    _reconnectionAttempts++;
    debugPrint(
      '‚ùå Erro de conex√£o (tentativa $_reconnectionAttempts): $mensagem',
    );

    // Fecha canal se existir
    try {
      _channel?.sink.close();
    } catch (e) {
      // Ignora erros ao fechar canal
    }
    _channel = null;

    _statusController.add(StatusConexao.erro);
    _erroController.add(mensagem);
  }

  /// Converte erros em mensagens amig√°veis
  String _getErrorMessage(dynamic error) {
    final errorStr = error.toString().toLowerCase();

    if (errorStr.contains('refused') || errorStr.contains('recusou')) {
      return 'Servidor indispon√≠vel. Verifique se o servidor est√° rodando.';
    } else if (errorStr.contains('timeout')) {
      return 'Timeout: Servidor n√£o responde. Verifique se o servidor est√° ativo.';
    } else if (errorStr.contains('socket')) {
      return 'Erro de rede. Verifique sua conex√£o e se o servidor est√° ativo.';
    } else {
      return 'N√£o foi poss√≠vel conectar ao servidor.';
    }
  }

  /// Envia uma mensagem de forma segura
  void _sendMessage(Map<String, dynamic> message) {
    try {
      if (_channel != null) {
        final messageJson = jsonEncode(message);
        debugPrint('üì§ Enviando mensagem: $messageJson');
        _channel!.sink.add(messageJson);
        debugPrint('‚úÖ Mensagem enviada com sucesso');
      } else {
        debugPrint(
          '‚ùå Canal WebSocket √© null, n√£o foi poss√≠vel enviar mensagem',
        );
      }
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar mensagem: $e');

      // Tenta reenviar ap√≥s um delay se for uma mensagem cr√≠tica como definirNome
      if (message['type'] == 'definirNome') {
        debugPrint('üîÑ Tentando reenviar nome ap√≥s erro...');
        Future.delayed(const Duration(milliseconds: 1000), () {
          if (_channel != null) {
            try {
              final messageJson = jsonEncode(message);
              _channel!.sink.add(messageJson);
              debugPrint('‚úÖ Nome reenviado com sucesso ap√≥s erro');
            } catch (retryError) {
              debugPrint('‚ùå Falha ao reenviar nome: $retryError');
            }
          }
        });
      }

      _erroController.add('Erro ao enviar dados para o servidor.');
    }
  }

  /// Envia uma inten√ß√£o de movimento para o servidor.
  void enviarMovimento(String idPeca, PosicaoTabuleiro novaPosicao) {
    _sendMessage({
      'type': 'moverPeca',
      'payload': {'idPeca': idPeca, 'novaPosicao': novaPosicao.toJson()},
    });
  }

  /// Envia o nome do usu√°rio para o servidor
  void enviarNome(String nome) {
    debugPrint('üè∑Ô∏è enviarNome chamado com: $nome');
    _enviarNomeComRetry(nome, 0);
  }

  /// Envia o nome com retry autom√°tico (mais conservador)
  void _enviarNomeComRetry(String nome, int tentativa) {
    if (tentativa >= 3) {
      debugPrint('‚ùå M√°ximo de tentativas de envio de nome atingido (3)');
      return;
    }

    // Verifica se o nome j√° foi confirmado antes de tentar novamente
    if (_nameConfirmed) {
      debugPrint('‚úÖ Nome j√° confirmado, cancelando retry');
      return;
    }

    try {
      if (_channel != null) {
        final message = {
          'type': 'definirNome',
          'payload': {'nome': nome},
        };
        final messageJson = jsonEncode(message);
        debugPrint('üì§ Enviando nome (tentativa ${tentativa + 1}/3): $nome');
        _channel!.sink.add(messageJson);
        debugPrint('‚úÖ Nome enviado com sucesso (tentativa ${tentativa + 1})');
      } else {
        debugPrint(
          '‚ùå Canal null na tentativa ${tentativa + 1}, reagendando...',
        );
        // Delay mais longo entre tentativas
        Future.delayed(Duration(milliseconds: 2000 * (tentativa + 1)), () {
          _enviarNomeComRetry(nome, tentativa + 1);
        });
      }
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar nome (tentativa ${tentativa + 1}): $e');
      // Delay ainda maior em caso de erro
      Future.delayed(Duration(milliseconds: 3000 * (tentativa + 1)), () {
        _enviarNomeComRetry(nome, tentativa + 1);
      });
    }
  }

  /// Reconecta ao servidor
  void reconnect(String url, {String? nomeUsuario}) {
    // Cancela timeouts anteriores
    _connectionTimeout?.cancel();
    _nameVerificationTimer?.cancel();
    _heartbeatTimer?.cancel();
    _keepAliveTimer?.cancel();
    _isConnecting = false;

    // Reseta estado de confirma√ß√£o
    resetNameConfirmation();
    _pendingUserName = nomeUsuario;

    // Fecha a conex√£o atual se existir
    try {
      _channel?.sink.close();
    } catch (e) {
      // Ignora erros ao fechar conex√£o anterior
    }

    _channel = null;

    // Backoff exponencial baseado no n√∫mero de tentativas
    final delaySeconds = math.min(
      math.pow(2, _reconnectionAttempts).toInt(),
      30,
    );
    debugPrint(
      'üîÑ Aguardando ${delaySeconds}s antes de reconectar (tentativa $_reconnectionAttempts)',
    );

    Future.delayed(Duration(seconds: delaySeconds), () {
      if (!_isConnected) {
        // S√≥ reconecta se ainda n√£o estiver conectado
        connect(url, nomeUsuario: nomeUsuario);
      }
    });
  }

  /// Reconecta especificamente durante a fase de posicionamento
  Future<bool> reconnectDuringPlacement(
    String url, {
    String? nomeUsuario,
  }) async {
    debugPrint('üîÑ Iniciando reconex√£o durante posicionamento...');

    try {
      // Emite status de reconectando
      _statusController.add(StatusConexao.conectando);

      // Limpa estado anterior mas preserva informa√ß√µes de posicionamento
      try {
        _channel?.sink.close();
      } catch (e) {
        // Ignora erros ao fechar conex√£o anterior
      }

      _channel = null;
      _isConnecting = false;
      _isConnected = false;
      _nameConfirmed = false;

      // For√ßa fase de posicionamento para reconex√£o
      _isInPlacementPhase = true;
      debugPrint('üéØ For√ßando fase de posicionamento para reconex√£o');

      // Aguarda um pouco antes de reconectar
      await Future.delayed(const Duration(milliseconds: 1000));

      // Tenta reconectar
      connect(url, nomeUsuario: nomeUsuario);

      // Aguarda conex√£o, nome confirmado ou timeout
      final completer = Completer<bool>();
      late StreamSubscription statusSubscription;
      late StreamSubscription placementSubscription;

      // Escuta mudan√ßas de status
      statusSubscription = streamDeStatus.listen((status) {
        debugPrint('üîÑ Status durante reconex√£o: $status');

        if (status == StatusConexao.conectado && _nameConfirmed) {
          debugPrint('‚úÖ Reconex√£o bem-sucedida - conectado e nome confirmado');
          statusSubscription.cancel();
          placementSubscription.cancel();
          completer.complete(true);
        } else if (status == StatusConexao.erro) {
          debugPrint('‚ùå Erro durante reconex√£o');
          statusSubscription.cancel();
          placementSubscription.cancel();
          completer.complete(false);
        }
      });

      // Escuta mensagens de placement para confirmar reconex√£o √† sess√£o
      placementSubscription = streamDePlacement.listen((data) {
        debugPrint(
          'üì® Mensagem de placement recebida durante reconex√£o: ${data['type']}',
        );

        // Se recebeu mensagem de placement, significa que reconectou √† sess√£o
        if (data['type'] == 'PLACEMENT_UPDATE' ||
            data['type'] == 'PLACEMENT_OPPONENT_READY' ||
            data['type'] == 'PLACEMENT_GAME_START') {
          debugPrint('‚úÖ Reconex√£o √† sess√£o de posicionamento confirmada');
          statusSubscription.cancel();
          placementSubscription.cancel();
          completer.complete(true);
        }
      });

      // Timeout de 15 segundos para reconex√£o (mais tempo para posicionamento)
      Timer(const Duration(seconds: 15), () {
        if (!completer.isCompleted) {
          debugPrint('‚è∞ Timeout na reconex√£o durante posicionamento');
          statusSubscription.cancel();
          placementSubscription.cancel();
          completer.complete(false);
        }
      });

      final result = await completer.future;
      debugPrint('üîÑ Resultado da reconex√£o: $result');
      return result;
    } catch (e) {
      debugPrint('‚ùå Erro na reconex√£o durante posicionamento: $e');
      _statusController.add(StatusConexao.erro);
      return false;
    }
  }

  /// Envia mensagem de posicionamento
  void enviarMensagemPlacement(Map<String, dynamic> message) {
    _sendMessage(message);
  }

  /// For√ßa o reenvio do nome (usado quando o pareamento n√£o progride)
  void forcarReenvioNome(String nome) {
    if (_nameConfirmed) {
      debugPrint('‚úÖ Nome j√° confirmado, n√£o √© necess√°rio reenviar');
      return;
    }

    debugPrint('üîÑ For√ßando reenvio do nome: $nome');
    _nameConfirmed = false;
    _pendingUserName = nome;
    _enviarNomeComRetry(nome, 0);
    _startNameVerificationTimer(nome);
  }

  /// Verifica se o nome foi confirmado pelo servidor
  bool get isNameConfirmed => _nameConfirmed;

  /// Obt√©m o nome pendente de confirma√ß√£o
  String? get pendingUserName => _pendingUserName;

  /// Reseta o estado de confirma√ß√£o do nome (usado em reconex√µes)
  void resetNameConfirmation() {
    debugPrint('üîÑ Resetando estado de confirma√ß√£o do nome');
    _nameConfirmed = false;
    _nameVerificationTimer?.cancel();
    // Volta para fase de posicionamento em reconex√µes
    _isInPlacementPhase = true;
  }

  /// Obt√©m informa√ß√µes completas sobre o status da conex√£o
  Map<String, dynamic> getConnectionStatus() {
    return {
      'isConnecting': _isConnecting,
      'isConnected': _isConnected,
      'nameConfirmed': _nameConfirmed,
      'pendingUserName': _pendingUserName,
      'hasChannel': _channel != null,
      'hasNameTimer':
          _nameVerificationTimer != null && _nameVerificationTimer!.isActive,
      'hasConnectionTimer':
          _connectionTimeout != null && _connectionTimeout!.isActive,
      'isInPlacementPhase': _isInPlacementPhase,
      'heartbeatTimeout': _getHeartbeatTimeout(),
      'reconnectionAttempts': _reconnectionAttempts,
      'isServerUnstable': isServerUnstable,
      'lastConnectionAttempt': _lastConnectionAttempt?.toString(),
    };
  }

  /// Inicia timer para verificar se o nome foi confirmado pelo servidor
  void _startNameVerificationTimer(String nomeUsuario) {
    _nameVerificationTimer?.cancel();

    // Timer mais conservador - verifica a cada 10 segundos e para ap√≥s 2 tentativas
    int tentativas = 0;
    const maxTentativas = 2;

    _nameVerificationTimer = Timer.periodic(const Duration(seconds: 10), (
      timer,
    ) {
      if (_nameConfirmed) {
        debugPrint('‚úÖ Nome confirmado, parando timer de verifica√ß√£o');
        timer.cancel();
        return;
      }

      if (tentativas >= maxTentativas) {
        debugPrint(
          '‚ö†Ô∏è M√°ximo de tentativas de verifica√ß√£o atingido ($maxTentativas), parando timer',
        );
        timer.cancel();
        return;
      }

      if (_channel != null && _pendingUserName != null) {
        tentativas++;
        debugPrint(
          'üîÑ Verifica√ß√£o $tentativas/$maxTentativas - Nome ainda n√£o confirmado, reenviando: $_pendingUserName',
        );
        _sendMessage({
          'type': 'definirNome',
          'payload': {'nome': _pendingUserName},
        });
      } else {
        debugPrint('‚ùå Canal ou nome pendente √© null, parando timer');
        timer.cancel();
      }
    });

    // Para o timer ap√≥s 30 segundos para evitar loop infinito
    Timer(const Duration(seconds: 30), () {
      _nameVerificationTimer?.cancel();
      if (!_nameConfirmed) {
        debugPrint('‚ö†Ô∏è Timer de verifica√ß√£o de nome expirou ap√≥s 30 segundos');
      }
    });
  }

  /// Inicia monitoramento de heartbeat para detectar desconex√µes silenciosas
  void _startHeartbeatMonitoring() {
    _heartbeatTimer?.cancel();

    // Durante posicionamento, desabilita heartbeat timeout - usa apenas keep-alive
    if (_isInPlacementPhase) {
      debugPrint('üíì Heartbeat timeout DESABILITADO durante posicionamento');
      return;
    }

    // Verifica a cada 30 segundos se recebemos mensagens recentemente
    _heartbeatTimer = Timer.periodic(const Duration(seconds: 30), (timer) {
      // Se mudou para posicionamento, para o heartbeat
      if (_isInPlacementPhase) {
        debugPrint('üíì Mudou para posicionamento, parando heartbeat timeout');
        timer.cancel();
        return;
      }

      if (_lastMessageReceived != null) {
        final timeSinceLastMessage = DateTime.now().difference(
          _lastMessageReceived!,
        );

        // Timeout apenas durante jogo ativo
        final timeoutSeconds = 120; // 2 minutos durante jogo

        if (timeSinceLastMessage.inSeconds > timeoutSeconds) {
          debugPrint(
            'üíî Heartbeat timeout (jogo) - sem mensagens por ${timeSinceLastMessage.inSeconds}s (limite: ${timeoutSeconds}s)',
          );
          _handleConnectionError('Conex√£o perdida com o servidor');
          timer.cancel();
        }
      }
    });
  }

  /// Retorna o timeout apropriado baseado na fase do jogo
  int _getHeartbeatTimeout() {
    if (_isInPlacementPhase) {
      // 10 minutos durante posicionamento - ainda mais tempo para evitar desconex√µes
      // Especialmente importante quando h√° problemas de servidor
      return isServerUnstable ? 900 : 600; // 15min se inst√°vel, 10min normal
    } else {
      // 2 minutos durante jogo ativo se servidor inst√°vel, 1 minuto normal
      return isServerUnstable ? 120 : 60;
    }
  }

  /// Define se est√° na fase de posicionamento (timeout mais longo)
  void setPlacementPhase(bool isPlacement) {
    if (_isInPlacementPhase != isPlacement) {
      _isInPlacementPhase = isPlacement;
      final phase = isPlacement ? 'posicionamento' : 'jogo';
      final timeout = _getHeartbeatTimeout();
      debugPrint('üéØ Mudan√ßa de fase: $phase (timeout: ${timeout}s)');

      // Reinicia o heartbeat com o novo timeout
      if (_isConnected) {
        _startHeartbeatMonitoring();

        // Controla keep-alive baseado na fase
        if (isPlacement) {
          _startKeepAlive();
        } else {
          _stopKeepAlive();
        }
      }
    }
  }

  /// Verifica se est√° na fase de posicionamento
  bool get isInPlacementPhase => _isInPlacementPhase;

  /// For√ßa mudan√ßa para fase de jogo (usado quando detectamos in√≠cio do jogo)
  void forceGamePhase() {
    debugPrint('üéØ For√ßando mudan√ßa para fase de jogo');
    setPlacementPhase(false);
  }

  /// For√ßa mudan√ßa para fase de posicionamento (usado em reconex√µes)
  void forcePlacementPhase() {
    debugPrint('üéØ For√ßando mudan√ßa para fase de posicionamento');
    setPlacementPhase(true);
  }

  /// Verifica se o servidor est√° inst√°vel baseado no n√∫mero de reconex√µes
  bool get isServerUnstable => _reconnectionAttempts > 3;

  /// Reseta contadores de estabilidade (chamado quando conex√£o √© bem-sucedida)
  void resetStabilityCounters() {
    _reconnectionAttempts = 0;
    _lastConnectionAttempt = null;
    debugPrint('‚úÖ Contadores de estabilidade resetados');
  }

  /// Inicia sistema de keep-alive durante posicionamento
  void _startKeepAlive() {
    _keepAliveTimer?.cancel();

    if (!_isInPlacementPhase) {
      debugPrint('üîÑ N√£o est√° em posicionamento, keep-alive n√£o necess√°rio');
      return;
    }

    debugPrint('üíì Iniciando keep-alive para posicionamento');

    // Envia ping a cada 30 segundos durante posicionamento
    _keepAliveTimer = Timer.periodic(const Duration(seconds: 30), (timer) {
      if (!_isInPlacementPhase) {
        debugPrint('üíì Saiu do posicionamento, parando keep-alive');
        timer.cancel();
        return;
      }

      if (_channel != null && _isConnected) {
        // Envia uma mensagem simples que o servidor reconhece
        try {
          // Usa mensagem de status de placement que o servidor conhece
          _sendMessage({
            'type': 'PLACEMENT_STATUS_REQUEST',
            'payload': {'keepAlive': true},
          });
          debugPrint('üíì Keep-alive (PLACEMENT_STATUS_REQUEST) enviado');
        } catch (e) {
          debugPrint('‚ùå Erro ao enviar keep-alive: $e');
          timer.cancel();
        }
      } else {
        debugPrint('‚ùå Canal n√£o dispon√≠vel, parando keep-alive');
        timer.cancel();
      }
    });
  }

  /// Para o sistema de keep-alive
  void _stopKeepAlive() {
    _keepAliveTimer?.cancel();
    debugPrint('üíì Keep-alive parado');
  }

  /// Reconecta especificamente durante partida ativa com recupera√ß√£o de estado
  Future<bool> reconnectDuringActiveGame(
    String url, {
    String? nomeUsuario,
    String? gameId,
  }) async {
    debugPrint('üîÑ Iniciando reconex√£o durante partida ativa...');

    try {
      // Emite status de reconectando
      _statusController.add(StatusConexao.conectando);

      // Limpa estado anterior mas preserva informa√ß√µes importantes
      try {
        _channel?.sink.close();
      } catch (e) {
        // Ignora erros ao fechar conex√£o anterior
      }

      _channel = null;
      _isConnecting = false;
      _isConnected = false;
      _nameConfirmed = false;

      // For√ßa fase de jogo para reconex√£o
      _isInPlacementPhase = false;
      debugPrint('üéØ For√ßando fase de jogo para reconex√£o');

      // Aguarda um pouco antes de reconectar
      await Future.delayed(const Duration(milliseconds: 1500));

      // Tenta reconectar
      connect(url, nomeUsuario: nomeUsuario);

      // Aguarda conex√£o, nome confirmado ou timeout
      final completer = Completer<bool>();
      late StreamSubscription statusSubscription;
      late StreamSubscription gameStateSubscription;

      // Escuta mudan√ßas de status
      statusSubscription = streamDeStatus.listen((status) {
        debugPrint('üîÑ Status durante reconex√£o de jogo: $status');

        if (status == StatusConexao.conectado && _nameConfirmed) {
          debugPrint('‚úÖ Reconex√£o bem-sucedida - conectado e nome confirmado');
          statusSubscription.cancel();
          gameStateSubscription.cancel();
          completer.complete(true);
        } else if (status == StatusConexao.jogando) {
          debugPrint('‚úÖ Reconex√£o bem-sucedida - jogo em andamento');
          statusSubscription.cancel();
          gameStateSubscription.cancel();
          completer.complete(true);
        } else if (status == StatusConexao.erro) {
          debugPrint('‚ùå Erro durante reconex√£o de jogo');
          statusSubscription.cancel();
          gameStateSubscription.cancel();
          completer.complete(false);
        }
      });

      // Escuta atualiza√ß√µes de estado do jogo para confirmar reconex√£o
      gameStateSubscription = streamDeEstados.listen((estado) {
        debugPrint(
          'üì® Estado do jogo recebido durante reconex√£o: ${estado.pecas.length} pe√ßas',
        );

        // Se recebeu estado do jogo, significa que reconectou √† partida
        if (estado.pecas.isNotEmpty) {
          debugPrint('‚úÖ Reconex√£o √† partida ativa confirmada');
          statusSubscription.cancel();
          gameStateSubscription.cancel();
          completer.complete(true);
        }
      });

      // Timeout de 20 segundos para reconex√£o de jogo ativo
      Timer(const Duration(seconds: 20), () {
        if (!completer.isCompleted) {
          debugPrint('‚è∞ Timeout na reconex√£o durante jogo ativo');
          statusSubscription.cancel();
          gameStateSubscription.cancel();
          completer.complete(false);
        }
      });

      final result = await completer.future;
      debugPrint('üîÑ Resultado da reconex√£o de jogo: $result');
      return result;
    } catch (e) {
      debugPrint('‚ùå Erro na reconex√£o durante jogo ativo: $e');
      _statusController.add(StatusConexao.erro);
      return false;
    }
  }

  /// Envia mensagem de recupera√ß√£o de estado do jogo
  void requestGameStateRecovery({String? gameId}) {
    if (gameId != null) {
      _sendMessage({
        'type': 'RECOVER_GAME_STATE',
        'payload': {'gameId': gameId},
      });
      debugPrint('üì§ Solicita√ß√£o de recupera√ß√£o de estado enviada: $gameId');
    } else {
      _sendMessage({'type': 'REQUEST_CURRENT_GAME_STATE', 'payload': {}});
      debugPrint('üì§ Solicita√ß√£o de estado atual enviada');
    }
  }

  /// Verifica se a conex√£o est√° est√°vel para jogo ativo
  bool get isStableForActiveGame {
    if (!_isConnected || !_nameConfirmed) return false;

    if (_lastMessageReceived == null) return false;

    final timeSinceLastMessage = DateTime.now().difference(
      _lastMessageReceived!,
    );
    return timeSinceLastMessage.inSeconds <
        30; // Menos de 30s desde √∫ltima mensagem
  }

  /// For√ßa reconex√£o imediata durante jogo ativo (para casos cr√≠ticos)
  void forceReconnectDuringActiveGame(
    String url,
    String? nomeUsuario, {
    String? gameId,
  }) {
    debugPrint('üö® For√ßando reconex√£o imediata durante jogo ativo');

    // Para todos os timers
    _connectionTimeout?.cancel();
    _nameVerificationTimer?.cancel();
    _heartbeatTimer?.cancel();
    _keepAliveTimer?.cancel();

    // Fecha conex√£o atual
    try {
      _channel?.sink.close();
    } catch (e) {
      // Ignora erros
    }

    _channel = null;
    _isConnecting = false;
    _isConnected = false;
    _nameConfirmed = false;

    // Preserva o nome do usu√°rio para reconex√£o
    if (nomeUsuario != null) {
      _pendingUserName = nomeUsuario;
      debugPrint('üîÑ Nome preservado para reconex√£o for√ßada: $nomeUsuario');
    }

    // For√ßa fase de jogo
    _isInPlacementPhase = false;

    // Reconecta imediatamente (sem delay)
    debugPrint('üîÑ Reconectando imediatamente ao jogo...');
    connect(url, nomeUsuario: nomeUsuario);

    // Solicita recupera√ß√£o de estado ap√≥s conex√£o
    Future.delayed(const Duration(seconds: 2), () {
      if (_isConnected) {
        requestGameStateRecovery(gameId: gameId);
      }
    });
  }

  /// For√ßa reconex√£o imediata durante posicionamento (para casos cr√≠ticos)
  void forceReconnectDuringPlacement(String url, String? nomeUsuario) {
    debugPrint('üö® For√ßando reconex√£o imediata durante posicionamento');

    // Para todos os timers
    _connectionTimeout?.cancel();
    _nameVerificationTimer?.cancel();
    _heartbeatTimer?.cancel();
    _keepAliveTimer?.cancel();

    // Fecha conex√£o atual
    try {
      _channel?.sink.close();
    } catch (e) {
      // Ignora erros
    }

    _channel = null;
    _isConnecting = false;
    _isConnected = false;
    _nameConfirmed = false;

    // Preserva o nome do usu√°rio para reconex√£o
    if (nomeUsuario != null) {
      _pendingUserName = nomeUsuario;
      debugPrint('üîÑ Nome preservado para reconex√£o for√ßada: $nomeUsuario');
    }

    // For√ßa fase de posicionamento
    _isInPlacementPhase = true;

    // Reconecta imediatamente (sem delay)
    debugPrint('üîÑ Reconectando imediatamente...');
    connect(url, nomeUsuario: nomeUsuario);
  }

  /// Imprime status detalhado da conex√£o para debug
  void printConnectionDebugInfo() {
    final status = getConnectionStatus();
    debugPrint('üîç === STATUS DA CONEX√ÉO ===');
    debugPrint('üîç Conectando: ${status['isConnecting']}');
    debugPrint('üîç Conectado: ${status['isConnected']}');
    debugPrint('üîç Nome confirmado: ${status['nameConfirmed']}');
    debugPrint('üîç Nome pendente: ${status['pendingUserName']}');
    debugPrint('üîç Tem canal: ${status['hasChannel']}');
    debugPrint('üîç Timer de nome ativo: ${status['hasNameTimer']}');
    debugPrint('üîç Timer de conex√£o ativo: ${status['hasConnectionTimer']}');
    debugPrint('üîç Fase de posicionamento: ${status['isInPlacementPhase']}');
    debugPrint('üîç Timeout heartbeat: ${status['heartbeatTimeout']}s');
    debugPrint('üîç Tentativas de reconex√£o: ${status['reconnectionAttempts']}');
    debugPrint('üîç Servidor inst√°vel: ${status['isServerUnstable']}');
    debugPrint(
      'üîç √öltima mensagem: ${_lastMessageReceived?.toString() ?? 'Nunca'}',
    );
    debugPrint('üîç ========================');
  }

  /// Fecha a conex√£o com o WebSocket.
  void dispose() {
    _connectionTimeout?.cancel();
    _nameVerificationTimer?.cancel();
    _heartbeatTimer?.cancel();
    _keepAliveTimer?.cancel();
    _isConnecting = false;

    try {
      _channel?.sink.close();
    } catch (e) {
      // Ignora erros ao fechar canal
    }

    _estadoController.close();
    _erroController.close();
    _statusController.close();
    _placementController.close();
  }
}
