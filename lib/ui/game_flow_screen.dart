import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../modelos_jogo.dart';
import '../providers.dart';
import '../placement_provider.dart';
import '../services/user_preferences.dart';
import 'tela_jogo.dart';
import 'piece_placement_screen.dart';
import 'matchmaking_screen.dart';
import 'military_theme_widgets.dart';

/// Tela que gerencia o fluxo completo do jogo ap√≥s o matchmaking.
/// Esta tela assume que j√° h√° 2 jogadores conectados.
class GameFlowScreen extends ConsumerStatefulWidget {
  const GameFlowScreen({super.key});

  @override
  ConsumerState<GameFlowScreen> createState() => _GameFlowScreenState();
}

class _GameFlowScreenState extends ConsumerState<GameFlowScreen> {
  GameFlowPhase _currentPhase = GameFlowPhase.placement;
  PlacementGameState? _placementState;
  List<PecaJogo>? _savedPlacedPieces;
  bool _hasInitialized = false;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (!_hasInitialized) {
        _checkGameStateAndInitialize();
      }
    });
  }

  void _checkGameStateAndInitialize() {
    debugPrint(
      'üîç _checkGameStateAndInitialize - hasInitialized: $_hasInitialized',
    );

    if (_hasInitialized) {
      debugPrint('üîç J√° foi inicializado, ignorando');
      return;
    }

    // Verifica se o placement j√° foi inicializado no provider
    final placementState = ref.read(placementStateProvider);
    if (placementState.placementState != null) {
      debugPrint('üîç Placement j√° existe no provider, ignorando');
      _hasInitialized = true;
      _placementState = placementState.placementState;
      setState(() {});
      debugPrint('üîç UI atualizada para mostrar placement do provider');
      return;
    }

    _hasInitialized = true;
    debugPrint('üîç Marcando como inicializado');
    final currentGameState = ref.read(gameStateProvider);

    debugPrint('üîç Verificando estado do jogo...');
    debugPrint('üîç Estado: ${currentGameState.estadoJogo != null}');
    debugPrint('üîç Nome usu√°rio: ${currentGameState.nomeUsuario}');
    debugPrint(
      'üîç Jogadores: ${currentGameState.estadoJogo?.jogadores.length ?? 0}',
    );
    debugPrint('üîç Pe√ßas: ${currentGameState.estadoJogo?.pecas.length ?? 0}');

    if (currentGameState.estadoJogo != null) {
      for (final jogador in currentGameState.estadoJogo!.jogadores) {
        debugPrint(
          'üîç Jogador: ${jogador.nome} (${jogador.equipe.name}) - ID: ${jogador.id}',
        );
      }
    }

    if (currentGameState.estadoJogo == null ||
        currentGameState.estadoJogo!.jogadores.length < 2) {
      debugPrint('‚ùå Estado inv√°lido, voltando para matchmaking');
      _returnToMatchmaking();
      return;
    }

    if (currentGameState.estadoJogo!.pecas.isNotEmpty) {
      debugPrint('üéÆ Jogo j√° tem pe√ßas, indo para fase de jogo');
      _startGamePhase();
      return;
    }

    debugPrint('üîß Iniciando placement');
    _startPlacementPhase(currentGameState.estadoJogo!);
  }

  void _returnToMatchmaking() {
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(builder: (context) => const MatchmakingScreen()),
    );
  }

  void _handleGameStateChange(TelaJogoState? previous, TelaJogoState current) {
    if (!_hasInitialized) return;

    final estadoJogo = current.estadoJogo;
    debugPrint('üîÑ GameFlowScreen: _handleGameStateChange chamado');
    debugPrint('üîÑ Estado atual: ${estadoJogo?.pecas.length ?? 0} pe√ßas');
    debugPrint('üîÑ Fase atual: $_currentPhase');

    if (estadoJogo == null || estadoJogo.jogadores.length < 2) {
      debugPrint('üîÑ Estado inv√°lido, voltando para matchmaking');
      _returnToMatchmaking();
      return;
    }

    if (_currentPhase == GameFlowPhase.placement &&
        estadoJogo.pecas.isNotEmpty &&
        _placementState != null) {
      debugPrint('üîÑ Placement conclu√≠do, iniciando jogo');
      _startGamePhase();
    }
  }

  void _startPlacementPhase(EstadoJogo estadoJogo) {
    debugPrint(
      'üîÑ _startPlacementPhase - fase: $_currentPhase, placementState: ${_placementState != null}',
    );

    if (_currentPhase != GameFlowPhase.placement || _placementState != null) {
      debugPrint('üîÑ Placement j√° foi iniciado ou fase incorreta, ignorando');
      return;
    }

    // Verifica se j√° existe no provider
    final existingPlacement = ref.read(placementStateProvider);
    if (existingPlacement.placementState != null) {
      debugPrint('üîÑ Placement j√° existe no provider, reutilizando');
      _placementState = existingPlacement.placementState;
      setState(() {});
      debugPrint('üîÑ UI atualizada para mostrar placement existente');
      return;
    }

    debugPrint('üîÑ Iniciando placement phase');
    final nomeUsuario = ref.read(gameStateProvider).nomeUsuario;
    final jogadorLocal = _findLocalPlayer(estadoJogo, nomeUsuario);

    if (jogadorLocal == null) {
      debugPrint('‚ùå Jogador local n√£o encontrado, voltando para matchmaking');
      _returnToMatchmaking();
      return;
    }

    final playerArea = jogadorLocal.equipe == Equipe.verde
        ? [0, 1, 2, 3]
        : [6, 7, 8, 9];

    _placementState = createInitialPlacementState(
      gameId: estadoJogo.idPartida,
      playerId: jogadorLocal.id,
      playerArea: playerArea,
    );

    ref
        .read(placementStateProvider.notifier)
        .initializePlacement(_placementState!);

    debugPrint('üîÑ Placement phase iniciado com sucesso');
    debugPrint(
      'üîÑ Jogador: ${jogadorLocal.nome} (${jogadorLocal.equipe.name})',
    );
    debugPrint('üîÑ √Årea: $playerArea');

    // Atualiza a UI para mostrar a tela de placement
    setState(() {});
    debugPrint('üîÑ UI atualizada para mostrar placement');
  }

  Jogador? _findLocalPlayer(EstadoJogo estadoJogo, String? nomeUsuario) {
    if (nomeUsuario == null) return null;

    final jogadorEncontrado = estadoJogo.jogadores.where((jogador) {
      final nomeJogador = jogador.nome.trim().toLowerCase();
      final nomeLocal = nomeUsuario.trim().toLowerCase();
      return nomeJogador == nomeLocal ||
          nomeJogador.contains(nomeLocal) ||
          nomeLocal.contains(nomeJogador);
    }).firstOrNull;

    if (jogadorEncontrado != null) {
      debugPrint('‚úÖ Jogador local encontrado: ${jogadorEncontrado.nome}');
    } else {
      debugPrint('‚ùå Jogador local n√£o encontrado para "$nomeUsuario"');
    }

    return jogadorEncontrado;
  }

  void _handlePlacementStateChange(
    PlacementScreenState? previous,
    PlacementScreenState current,
  ) {
    debugPrint('üîÑ _handlePlacementStateChange chamado');
    debugPrint('üîÑ shouldNavigateToGame: ${current.shouldNavigateToGame}');
    debugPrint('üîÑ currentPhase: $_currentPhase');
    debugPrint(
      'üîÑ placementState gamePhase: ${current.placementState?.gamePhase}',
    );

    if (current.shouldNavigateToGame &&
        _currentPhase == GameFlowPhase.placement) {
      debugPrint('üîÑ Iniciando transi√ß√£o para o jogo!');
      _startGamePhase();
    }
  }

  void _startGamePhase() {
    debugPrint('üéÆ _startGamePhase iniciado');
    _transferPlacedPiecesToGame();
    setState(() {
      _currentPhase = GameFlowPhase.game;
    });
    debugPrint('üéÆ Fase alterada para GameFlowPhase.game');
    ref.read(placementStateProvider.notifier).resetToGame();
    debugPrint('üéÆ Placement provider resetado');
  }

  Future<void> _transferPlacedPiecesToGame() async {
    debugPrint('üîÑ Iniciando transfer√™ncia de pe√ßas...');
    // Implementa√ß√£o simplificada para evitar complexidade
    final placementState = ref.read(placementStateProvider);
    if (placementState.placementState?.placedPieces.isNotEmpty == true) {
      debugPrint(
        'üéÆ Pe√ßas transferidas: ${placementState.placementState!.placedPieces.length}',
      );
    }
  }

  void _handleBackFromPlacement() {
    _returnToMatchmaking();
  }

  void _handleGameStart() {
    _savePlacedPieces();
    _startGamePhase();
  }

  void _savePlacedPieces() {
    final placementState = ref.read(placementStateProvider);
    if (placementState.placementState?.placedPieces.isNotEmpty == true) {
      _savedPlacedPieces = List<PecaJogo>.from(
        placementState.placementState!.placedPieces,
      );
      debugPrint('üíæ Pe√ßas salvas: ${_savedPlacedPieces?.length ?? 0}');
    }
  }

  @override
  Widget build(BuildContext context) {
    ref.listen<TelaJogoState>(gameStateProvider, (previous, current) {
      _handleGameStateChange(previous, current);

      // Detecta desconex√µes do oponente
      if (current.statusConexao == StatusConexao.oponenteDesconectado &&
          previous?.statusConexao != StatusConexao.oponenteDesconectado) {
        debugPrint(
          'üö® GameFlowScreen: Oponente desconectou, voltando para matchmaking',
        );
        _showOpponentDisconnectedAndReturn(context);
      }

      // Detecta perda de conex√£o com servidor
      if ((current.statusConexao == StatusConexao.desconectado ||
              current.statusConexao == StatusConexao.erro) &&
          previous?.statusConexao == StatusConexao.jogando) {
        debugPrint(
          'üö® GameFlowScreen: Conex√£o perdida, voltando para matchmaking',
        );
        _showConnectionLostAndReturn(context);
      }
    });

    ref.listen<PlacementScreenState>(placementStateProvider, (
      previous,
      current,
    ) {
      _handlePlacementStateChange(previous, current);
    });

    switch (_currentPhase) {
      case GameFlowPhase.placement:
        if (_placementState == null) {
          return _buildLoadingScreen();
        }
        return PiecePlacementScreen(
          initialState: _placementState!,
          onGameStart: _handleGameStart,
          onBack: _handleBackFromPlacement,
        );

      case GameFlowPhase.game:
        return const TelaJogo();
    }
  }

  Widget _buildLoadingScreen() {
    return Scaffold(
      body: MilitaryThemeWidgets.militaryBackground(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(
                  MilitaryThemeWidgets.primaryGreen,
                ),
              ),
              const SizedBox(height: 16),
              const Text(
                'Preparando posicionamento...',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                ),
              ),
              const SizedBox(height: 24),
              // Informa√ß√£o sobre timeout durante posicionamento
              Container(
                padding: const EdgeInsets.all(16),
                margin: const EdgeInsets.symmetric(horizontal: 32),
                decoration: BoxDecoration(
                  color: Colors.black.withValues(alpha: 0.3),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: MilitaryThemeWidgets.primaryGreen.withValues(
                      alpha: 0.3,
                    ),
                    width: 1,
                  ),
                ),
                child: Column(
                  children: [
                    Icon(
                      Icons.info_outline,
                      color: MilitaryThemeWidgets.primaryGreen,
                      size: 20,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Tempo para Posicionamento',
                      style: TextStyle(
                        color: MilitaryThemeWidgets.primaryGreen,
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      'Voc√™ tem at√© 5 minutos para posicionar suas pe√ßas.\nPense bem na sua estrat√©gia!',
                      style: TextStyle(
                        color: Colors.white.withValues(alpha: 0.8),
                        fontSize: 12,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// Mostra di√°logo quando o oponente desconecta e retorna para matchmaking
  void _showOpponentDisconnectedAndReturn(BuildContext context) {
    MilitaryThemeWidgets.showMilitaryDialog(
      context: context,
      title: 'Oponente Desconectou',
      titleIcon: Icons.person_off,
      barrierDismissible: false,
      content: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('Seu oponente saiu da partida.', style: TextStyle(fontSize: 16)),
          SizedBox(height: 16),
          Text(
            'Voc√™ ser√° redirecionado para procurar um novo oponente.',
            style: TextStyle(fontSize: 14, color: Colors.grey[600]),
          ),
        ],
      ),
      actions: [
        MilitaryThemeWidgets.militaryButton(
          text: 'Procurar Novo Oponente',
          icon: Icons.refresh,
          onPressed: () {
            Navigator.of(context).pop();
            // For√ßa volta para matchmaking
            ref.read(gameStateProvider.notifier).forcarVoltaParaMatchmaking();
            // Navega para matchmaking
            Navigator.of(context).pushAndRemoveUntil(
              MaterialPageRoute(
                builder: (context) => const MatchmakingScreen(),
              ),
              (route) => false,
            );
          },
        ),
      ],
    );
  }

  /// Mostra di√°logo quando perde conex√£o com servidor durante posicionamento
  void _showConnectionLostAndReturn(BuildContext context) {
    // Durante posicionamento, oferece reconex√£o para a mesma sess√£o
    if (_currentPhase == GameFlowPhase.placement) {
      _showPlacementReconnectionDialog(context);
    } else {
      // Durante jogo, volta para matchmaking
      _showGameDisconnectionDialog(context);
    }
  }

  /// Di√°logo espec√≠fico para reconex√£o durante posicionamento
  void _showPlacementReconnectionDialog(BuildContext context) {
    MilitaryThemeWidgets.showMilitaryDialog(
      context: context,
      title: 'Conex√£o Perdida Durante Posicionamento',
      titleIcon: Icons.wifi_off,
      barrierDismissible: false,
      content: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'A conex√£o foi perdida durante o posicionamento das pe√ßas.',
            style: TextStyle(fontSize: 16),
          ),
          SizedBox(height: 16),
          Text(
            'Voc√™ pode tentar reconectar para continuar na mesma partida ou procurar um novo oponente.',
            style: TextStyle(fontSize: 14, color: Colors.grey[600]),
          ),
        ],
      ),
      actions: [
        MilitaryThemeWidgets.militaryButton(
          text: 'Reconectar √† Partida',
          icon: Icons.refresh,
          onPressed: () {
            Navigator.of(context).pop();
            _attemptPlacementReconnection();
          },
        ),
        SizedBox(height: 8),
        MilitaryThemeWidgets.militaryButton(
          text: 'Procurar Novo Oponente',
          icon: Icons.person_search,
          onPressed: () {
            Navigator.of(context).pop();
            _returnToMatchmaking();
          },
        ),
      ],
    );
  }

  /// Di√°logo para desconex√£o durante jogo ativo
  void _showGameDisconnectionDialog(BuildContext context) {
    MilitaryThemeWidgets.showMilitaryDialog(
      context: context,
      title: 'Conex√£o Perdida',
      titleIcon: Icons.wifi_off,
      barrierDismissible: false,
      content: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'A conex√£o com o servidor foi perdida.',
            style: TextStyle(fontSize: 16),
          ),
          SizedBox(height: 16),
          Text(
            'Voc√™ ser√° redirecionado para procurar um novo oponente.',
            style: TextStyle(fontSize: 14, color: Colors.grey[600]),
          ),
        ],
      ),
      actions: [
        MilitaryThemeWidgets.militaryButton(
          text: 'Procurar Novo Oponente',
          icon: Icons.refresh,
          onPressed: () {
            Navigator.of(context).pop();
            _returnToMatchmaking();
          },
        ),
      ],
    );
  }

  /// Tenta reconectar especificamente durante a fase de posicionamento
  Future<void> _attemptPlacementReconnection() async {
    debugPrint('üîÑ Tentando reconex√£o durante posicionamento...');

    try {
      // Mostra loading durante reconex√£o
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => MilitaryThemeWidgets.militaryCard(
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                CircularProgressIndicator(
                  valueColor: AlwaysStoppedAnimation<Color>(
                    MilitaryThemeWidgets.primaryGreen,
                  ),
                ),
                SizedBox(height: 16),
                Text(
                  'Reconectando √† partida...',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
                ),
              ],
            ),
          ),
        ),
      );

      // Tenta reconectar usando o m√©todo espec√≠fico para posicionamento
      final socketService = ref.read(gameSocketProvider);
      final nomeUsuario = await UserPreferences.getUserName();
      final serverAddress = await UserPreferences.getServerAddress();

      final success = await socketService.reconnectDuringPlacement(
        serverAddress,
        nomeUsuario: nomeUsuario,
      );

      // Remove o loading dialog
      if (mounted) {
        Navigator.of(context).pop();
      }

      if (success) {
        debugPrint('‚úÖ Reconex√£o durante posicionamento bem-sucedida');
        // For√ßa volta para fase de posicionamento
        socketService.forcePlacementPhase();
      } else {
        debugPrint('‚ùå Falha na reconex√£o, voltando para matchmaking');
        _showReconnectionFailedDialog();
      }
    } catch (e) {
      debugPrint('‚ùå Erro durante reconex√£o: $e');
      if (mounted) {
        Navigator.of(context).pop(); // Remove loading dialog
        _showReconnectionFailedDialog();
      }
    }
  }

  /// Mostra di√°logo quando a reconex√£o falha
  void _showReconnectionFailedDialog() {
    MilitaryThemeWidgets.showMilitaryDialog(
      context: context,
      title: 'Reconex√£o Falhou',
      titleIcon: Icons.error_outline,
      barrierDismissible: false,
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            'N√£o foi poss√≠vel reconectar √† partida anterior.',
            style: TextStyle(fontSize: 16),
          ),
          SizedBox(height: 16),
          Text(
            'Voc√™ ser√° redirecionado para procurar um novo oponente.',
            style: TextStyle(fontSize: 14, color: Colors.grey[600]),
          ),
        ],
      ),
      actions: [
        MilitaryThemeWidgets.militaryButton(
          text: 'Procurar Novo Oponente',
          icon: Icons.person_search,
          onPressed: () {
            Navigator.of(context).pop();
            _returnToMatchmaking();
          },
        ),
      ],
    );
  }
}

enum GameFlowPhase { placement, game }
